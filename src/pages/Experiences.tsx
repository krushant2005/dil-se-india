import { useState } from "react";
import { motion } from "framer-motion";
import { Header } from "@/components/Header";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import type { Language } from "@/components/LanguageSwitcher";
import { Play, VolumeX, Volume2, Maximize, RotateCcw } from "lucide-react";

const translations = {
  en: {
    title: "360¬∞ Immersive Experiences",
    subtitle: "Step into India's most iconic places through virtual reality",
    experiences: {
      tajMahal: {
        title: "Taj Mahal at Sunrise",
        description: "Experience the ethereal beauty of the Taj Mahal as dawn breaks",
        location: "Agra, Uttar Pradesh",
        duration: "8 minutes"
      },
      kerala: {
        title: "Kerala Backwater Journey",
        description: "Navigate through the serene backwaters of God's Own Country",
        location: "Alleppey, Kerala", 
        duration: "12 minutes"
      },
      rajasthan: {
        title: "Rajasthan Desert Safari",
        description: "Ride through the golden dunes of the Thar Desert",
        location: "Jaisalmer, Rajasthan",
        duration: "15 minutes"
      },
      hampi: {
        title: "Ancient Hampi Ruins",
        description: "Walk among the mystical ruins of the Vijayanagara Empire",
        location: "Hampi, Karnataka",
        duration: "10 minutes"
      }
    },
    controls: {
      play: "Play Experience",
      pause: "Pause",
      mute: "Mute",
      unmute: "Unmute", 
      fullscreen: "Fullscreen",
      reset: "Reset View"
    }
  },
  hi: {
    title: "360¬∞ ‡§á‡§Æ‡§∞‡•ç‡§∏‡§ø‡§µ ‡§Ö‡§®‡•Å‡§≠‡§µ",
    subtitle: "‡§µ‡§∞‡•ç‡§ö‡•Å‡§Ö‡§≤ ‡§∞‡§ø‡§Ø‡§≤‡§ø‡§ü‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø‡§∑‡•ç‡§†‡§ø‡§§ ‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡§¶‡§Æ ‡§∞‡§ñ‡•á‡§Ç",
    experiences: {
      tajMahal: {
        title: "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡•ã‡§¶‡§Ø ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§§‡§æ‡§ú‡§Æ‡§π‡§≤",
        description: "‡§∏‡•Å‡§¨‡§π ‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§ï‡§ø‡§∞‡§£‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§§‡§æ‡§ú‡§Æ‡§π‡§≤ ‡§ï‡•Ä ‡§Ö‡§≤‡•å‡§ï‡§ø‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞‡•á‡§Ç",
        location: "‡§Ü‡§ó‡§∞‡§æ, ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
        duration: "8 ‡§Æ‡§ø‡§®‡§ü"
      },
      kerala: {
        title: "‡§ï‡•á‡§∞‡§≤ ‡§¨‡•à‡§ï‡§µ‡§æ‡§ü‡§∞ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ",
        description: "‡§à‡§∂‡•ç‡§µ‡§∞ ‡§ï‡•á ‡§Ö‡§™‡§®‡•á ‡§¶‡•á‡§∂ ‡§ï‡•á ‡§∂‡§æ‡§Ç‡§§ ‡§¨‡•à‡§ï‡§µ‡§æ‡§ü‡§∞ ‡§Æ‡•á‡§Ç ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç",
        location: "‡§Ö‡§≤‡•ç‡§≤‡•á‡§™‡•ç‡§™‡•Ä, ‡§ï‡•á‡§∞‡§≤",
        duration: "12 ‡§Æ‡§ø‡§®‡§ü"
      },
      rajasthan: {
        title: "‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§® ‡§∞‡•á‡§ó‡§ø‡§∏‡•ç‡§§‡§æ‡§® ‡§∏‡§´‡§æ‡§∞‡•Ä",
        description: "‡§•‡§æ‡§∞ ‡§∞‡•á‡§ó‡§ø‡§∏‡•ç‡§§‡§æ‡§® ‡§ï‡•á ‡§∏‡•Å‡§®‡§π‡§∞‡•á ‡§ü‡•Ä‡§≤‡•ã‡§Ç ‡§™‡§∞ ‡§∏‡§µ‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç",
        location: "‡§ú‡•à‡§∏‡§≤‡§Æ‡•á‡§∞, ‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®",
        duration: "15 ‡§Æ‡§ø‡§®‡§ü"
      },
      hampi: {
        title: "‡§™‡•ç‡§∞‡§æ‡§ö‡•Ä‡§® ‡§π‡§Æ‡•ç‡§™‡•Ä ‡§ñ‡§Ç‡§°‡§π‡§∞",
        description: "‡§µ‡§ø‡§ú‡§Ø‡§®‡§ó‡§∞ ‡§∏‡§æ‡§Æ‡•ç‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ï‡•á ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø ‡§ñ‡§Ç‡§°‡§π‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§ö‡§≤‡•á‡§Ç",
        location: "‡§π‡§Æ‡•ç‡§™‡•Ä, ‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï",
        duration: "10 ‡§Æ‡§ø‡§®‡§ü"
      }
    },
    controls: {
      play: "‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ö‡§≤‡§æ‡§è‡§Ç",
      pause: "‡§∞‡•ã‡§ï‡•á‡§Ç",
      mute: "‡§Æ‡•Ç‡§ï ‡§ï‡§∞‡•á‡§Ç",
      unmute: "‡§ß‡•ç‡§µ‡§®‡§ø ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç",
      fullscreen: "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®",
      reset: "‡§¶‡•É‡§∂‡•ç‡§Ø ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"
    }
  },
  gu: {
    title: "360¬∞ ‡™á‡™Æ‡™∞‡´ç‡™∏‡™ø‡™µ ‡™Ö‡™®‡´Å‡™≠‡™µ‡´ã",
    subtitle: "‡™µ‡™∞‡´ç‡™ö‡´ç‡™Ø‡´Å‡™Ö‡™≤ ‡™∞‡™ø‡™Ø‡™æ‡™≤‡™ø‡™ü‡´Ä ‡™¶‡´ç‡™µ‡™æ‡™∞‡™æ ‡™≠‡™æ‡™∞‡™§‡™®‡™æ ‡™™‡´ç‡™∞‡™§‡™ø‡™∑‡´ç‡™†‡™ø‡™§ ‡™∏‡´ç‡™•‡™≥‡´ã‡™Æ‡™æ‡™Ç ‡™™‡´ç‡™∞‡™µ‡´á‡™∂‡´ã",
    experiences: {
      tajMahal: {
        title: "‡™∏‡´Ç‡™∞‡´ç‡™Ø‡´ã‡™¶‡™Ø ‡™µ‡™ñ‡™§‡´á ‡™§‡™æ‡™ú‡™Æ‡™π‡´á‡™≤",
        description: "‡™∏‡™µ‡™æ‡™∞‡™®‡™æ ‡™∏‡™Æ‡™Ø‡´á ‡™§‡™æ‡™ú‡™Æ‡™π‡´á‡™≤‡™®‡´Ä ‡™Ö‡™¶‡´ç‡™≠‡´Å‡™§ ‡™∏‡´Å‡™Ç‡™¶‡™∞‡™§‡™æ‡™®‡´ã ‡™Ö‡™®‡´Å‡™≠‡™µ ‡™ï‡™∞‡´ã",
        location: "‡™Ü‡™ó‡´ç‡™∞‡™æ, ‡™â‡™§‡´ç‡™§‡™∞ ‡™™‡´ç‡™∞‡™¶‡´á‡™∂",
        duration: "8 ‡™Æ‡™ø‡™®‡™ø‡™ü"
      },
      kerala: {
        title: "‡™ï‡´á‡™∞‡™≥ ‡™¨‡´á‡™ï‡™µ‡´ã‡™ü‡™∞ ‡™™‡´ç‡™∞‡™µ‡™æ‡™∏",
        description: "‡™≠‡™ó‡™µ‡™æ‡™®‡™®‡™æ ‡™™‡´ã‡™§‡™æ‡™®‡™æ ‡™¶‡´á‡™∂‡™®‡™æ ‡™∂‡™æ‡™Ç‡™§ ‡™¨‡´á‡™ï‡™µ‡´ã‡™ü‡™∞‡™Æ‡™æ‡™Ç ‡™™‡´ç‡™∞‡™µ‡™æ‡™∏ ‡™ï‡™∞‡´ã",
        location: "‡™è‡™≤‡´á‡™™‡´ç‡™™‡´Ä, ‡™ï‡´á‡™∞‡™≥", 
        duration: "12 ‡™Æ‡™ø‡™®‡™ø‡™ü"
      },
      rajasthan: {
        title: "‡™∞‡™æ‡™ú‡™∏‡´ç‡™•‡™æ‡™® ‡™∞‡™£ ‡™∏‡™´‡™æ‡™∞‡´Ä",
        description: "‡™•‡™æ‡™∞ ‡™∞‡™£‡™®‡™æ ‡™∏‡´ã‡™®‡´á‡™∞‡´Ä ‡™ü‡´á‡™ï‡™∞‡™æ‡™ì ‡™™‡™∞ ‡™∏‡™µ‡™æ‡™∞‡´Ä ‡™ï‡™∞‡´ã",
        location: "‡™ú‡´à‡™∏‡™≤‡™Æ‡´á‡™∞, ‡™∞‡™æ‡™ú‡™∏‡´ç‡™•‡™æ‡™®",
        duration: "15 ‡™Æ‡™ø‡™®‡™ø‡™ü"
      },
      hampi: {
        title: "‡™™‡´ç‡™∞‡™æ‡™ö‡´Ä‡™® ‡™π‡™Æ‡´ç‡™™‡´Ä ‡™ñ‡™Ç‡™°‡´á‡™∞‡´ã",
        description: "‡™µ‡™ø‡™ú‡™Ø‡™®‡™ó‡™∞ ‡™∏‡™æ‡™Æ‡´ç‡™∞‡™æ‡™ú‡´ç‡™Ø‡™®‡™æ ‡™∞‡™π‡™∏‡´ç‡™Ø‡™Æ‡™Ø ‡™ñ‡™Ç‡™°‡´á‡™∞‡´ã ‡™µ‡™ö‡´ç‡™ö‡´á ‡™ö‡™æ‡™≤‡´ã",
        location: "‡™π‡™Æ‡´ç‡™™‡´Ä, ‡™ï‡™∞‡´ç‡™£‡™æ‡™ü‡™ï",
        duration: "10 ‡™Æ‡™ø‡™®‡™ø‡™ü"
      }
    },
    controls: {
      play: "‡™Ö‡™®‡´Å‡™≠‡™µ ‡™ö‡™≤‡™æ‡™µ‡´ã",
      pause: "‡™∞‡´ã‡™ï‡´ã",
      mute: "‡™Æ‡´å‡™® ‡™ï‡™∞‡´ã",
      unmute: "‡™Ö‡™µ‡™æ‡™ú ‡™ö‡™æ‡™≤‡´Å ‡™ï‡™∞‡´ã",
      fullscreen: "‡™∏‡™Ç‡™™‡´Ç‡™∞‡´ç‡™£ ‡™∏‡´ç‡™ï‡´ç‡™∞‡´Ä‡™®",
      reset: "‡™¶‡´É‡™∂‡´ç‡™Ø ‡™∞‡´Ä‡™∏‡´á‡™ü ‡™ï‡™∞‡´ã"
    }
  }
};

const Experiences = () => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');
  const [playingExperience, setPlayingExperience] = useState<string | null>(null);
  const [isMuted, setIsMuted] = useState(false);
  const t = translations[currentLanguage];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2
      }
    }
  };

  const itemVariants = {
    hidden: { y: 50, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.6,
        ease: "easeOut"
      }
    }
  };

  const experiences = Object.entries(t.experiences);

  return (
    <div className="min-h-screen bg-background">
      <Header 
        currentLanguage={currentLanguage} 
        onLanguageChange={setCurrentLanguage} 
      />
      
      <main className="pt-20">
        <motion.div 
          className="container mx-auto px-4 py-12"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          <motion.div className="text-center mb-12" variants={itemVariants}>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-cultural-royal to-cultural-emerald bg-clip-text text-transparent mb-4">
              {t.title}
            </h1>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              {t.subtitle}
            </p>
          </motion.div>

          <motion.div 
            className="grid grid-cols-1 lg:grid-cols-2 gap-8"
            variants={containerVariants}
          >
            {experiences.map(([key, experience], index) => (
              <motion.div key={key} variants={itemVariants}>
                <Card className="overflow-hidden group hover:shadow-elegant transition-all duration-500">
                  <div className="relative aspect-video bg-gradient-to-br from-cultural-gold/10 to-cultural-royal/10">
                    {/* 360¬∞ Experience Viewer Placeholder */}
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="text-8xl opacity-20">üåê</div>
                    </div>
                    
                    {/* Play Overlay */}
                    <div className="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <Button
                        size="lg"
                        className="rounded-full h-16 w-16"
                        onClick={() => setPlayingExperience(playingExperience === key ? null : key)}
                      >
                        <Play className="h-8 w-8" />
                      </Button>
                    </div>

                    {/* Duration Badge */}
                    <Badge className="absolute top-4 right-4 bg-background/90 text-foreground">
                      {experience.duration}
                    </Badge>

                    {/* Controls */}
                    {playingExperience === key && (
                      <motion.div 
                        className="absolute bottom-4 left-4 right-4 flex items-center justify-between bg-background/90 rounded-lg p-2"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Play className="h-4 w-4" />
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => setIsMuted(!isMuted)}
                          >
                            {isMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
                          </Button>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <RotateCcw className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Maximize className="h-4 w-4" />
                          </Button>
                        </div>
                      </motion.div>
                    )}
                  </div>

                  <CardHeader>
                    <CardTitle className="text-xl">{experience.title}</CardTitle>
                    <div className="flex items-center justify-between text-sm text-muted-foreground">
                      <span>{experience.location}</span>
                      <Badge variant="outline">360¬∞</Badge>
                    </div>
                  </CardHeader>

                  <CardContent>
                    <p className="text-muted-foreground mb-4">
                      {experience.description}
                    </p>
                    <Button 
                      className="w-full"
                      onClick={() => setPlayingExperience(playingExperience === key ? null : key)}
                    >
                      {playingExperience === key ? t.controls.pause : t.controls.play}
                    </Button>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>
      </main>
    </div>
  );
};

export default Experiences;